#include <stdio.h>
#include <string.h>

#define BUFFERSIZE 20

//Create a global variable "rxbuffer" of size "BUFFERSIZE" to hold a whole string from a peripheral device
char rxbuffer[BUFFERSIZE];

//This is a flag used to communicate between the rx_ISR() and main() for main to do something with the buffer
int readme = 0;

void rx_ISR (void)
{
  //define a local variable "my_char" for holding data coming from hardware
  char my_char = 0;

  //define a static int called "buffer_ii" as an index for the current location in the receive buffer
  static int buffer_ii = 0;

  //retrieve the current received character from "hardware".  This step should be replaced with hardware-specific code in MPLABX
  my_char = UART2_Recieve();

  //if the current index is less than the size of rxbuffer
  if (buffer_ii < (sizeof (rxbuffer)))
    {
        //if the received character is a "terminating" character (;) in this case,
        if (my_char == ';')
    	{
    	    // set the current element of the receive buffer to the string terminating value (0)
    	    rxbuffer[buffer_ii] = 0;
    	    // reset the index
    	    buffer_ii = 0;
    	    // set the flag indicating for main() to do something special
     	    readme = 1;
    	}
    	// else if the received character is not the terminating character,
        else
    	{
    	    //save it at the current index in the string
    	    rxbuffer[buffer_ii] = my_char;
    	    //increment the index
    	    buffer_ii++;
    	}
    }
    // if the current index is not less than the length of the buffer
    else
    {
        //clear out the buffer by setting the first element to 0
        rxbuffer[0] = 0;
        //and reset the index
        buffer_ii = 0;
    }



}

int main ()
{
  char str[] ="$GNRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C";
  char *p;
  
  printf ("Split \"%s\" in tokens:\n", str);
  
  p = strtok (str,",");
  
    printf ("%s\n", p);
    char *gpsadd = p;
    p = strtok (NULL, ",");
  
    printf ("%s\n", p);
    char *gpstime = p;
    p = strtok (NULL,",");
    
    printf ("%s\n", p);
    char *status = p;
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    char *lat = p;
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    char *nsdirection = p;
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    char *longitude = p;
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    char *ewdirection = p;
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("%s\n", p);
    p = strtok (NULL, ",");
    
    printf ("latitude: %s %s\r\n", lat, nsdirection);
    printf ("longitude: %s %s\r\n", longitude, ewdirection);
  
  return 0;
}
